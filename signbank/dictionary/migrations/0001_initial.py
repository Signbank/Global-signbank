# -*- coding: utf-8 -*-
# Generated by Django 1.9 on 2017-03-17 10:13
from __future__ import unicode_literals

import datetime
from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Definition',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('text', models.TextField()),
                ('role', models.CharField(choices=[(b'note', b'Note'), (b'privatenote', b'Private Note'), (b'phon', b'Phonology'), (b'todo', b'To Do'), (b'sugg', b'Suggestion for other gloss'), (b'disc', b'Discuss between annotators'), (b'ety', b'Etymology')], max_length=20, verbose_name=b'Type')),
                ('count', models.IntegerField()),
                ('published', models.BooleanField(default=True)),
            ],
            options={
                'ordering': ['gloss', 'role', 'count'],
            },
        ),
        migrations.CreateModel(
            name='DeletedGlossOrMedia',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('item_type', models.CharField(choices=[(b'gloss', b'gloss'), (b'image', b'image'), (b'video', b'video')], max_length=5)),
                ('idgloss', models.CharField(max_length=50, verbose_name=b'ID Gloss')),
                ('annotation_idgloss', models.CharField(max_length=30, verbose_name=b'Annotation ID Gloss: Dutch')),
                ('old_pk', models.IntegerField()),
                ('filename', models.CharField(blank=True, max_length=100)),
                ('deletion_date', models.DateField(default=datetime.date.today)),
            ],
        ),
        migrations.CreateModel(
            name='Dialect',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=20)),
                ('description', models.TextField()),
            ],
            options={
                'ordering': ['language', 'name'],
            },
        ),
        migrations.CreateModel(
            name='FieldChoice',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('field', models.CharField(max_length=50)),
                ('english_name', models.CharField(max_length=50)),
                ('dutch_name', models.CharField(max_length=50)),
                ('chinese_name', models.CharField(max_length=50)),
                ('machine_value', models.IntegerField(help_text=b'The actual numeric value stored in the database. Created automatically.')),
            ],
            options={
                'ordering': ['field', 'machine_value'],
            },
        ),
        migrations.CreateModel(
            name='Gloss',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('idgloss', models.CharField(help_text=b'\n    This is the unique identifying name of an entry of a sign form in the\ndatabase. No two Sign Entry Names can be exactly the same, but a "Sign\nEntry Name" can be (and often is) the same as the Annotation Idgloss.', max_length=50, verbose_name='Lemma ID Gloss')),
                ('annotation_idgloss', models.CharField(help_text=b"\n    This is the Dutch name of a sign used by annotators when glossing the corpus in\nan ELAN annotation file. The Annotation Idgloss may be the same for two or\nmore entries (each with their own 'Sign Entry Name'). If two sign entries\nhave the same 'Annotation Idgloss' that means they differ in form in only\nminor or insignificant ways that can be ignored.", max_length=30, unique=True, verbose_name='Annotation ID Gloss: Dutch')),
                ('annotation_idgloss_en', models.CharField(blank=True, help_text=b"\n    This is the English name of a sign used by annotators when glossing the corpus in\nan ELAN annotation file. The Annotation Idgloss may be the same for two or\nmore entries (each with their own 'Sign Entry Name'). If two sign entries\nhave the same 'Annotation Idgloss' that means they differ in form in only\nminor or insignificant ways that can be ignored.", max_length=30, unique=True, verbose_name='Annotation ID Gloss: English')),
                ('bsltf', models.NullBooleanField(verbose_name='BSL sign')),
                ('asltf', models.NullBooleanField(verbose_name='ASL sign')),
                ('aslgloss', models.CharField(blank=True, max_length=50, verbose_name='ASL gloss')),
                ('asloantf', models.NullBooleanField(verbose_name='ASL loan sign')),
                ('bslgloss', models.CharField(blank=True, max_length=50, verbose_name='BSL gloss')),
                ('bslloantf', models.NullBooleanField(verbose_name='BSL loan sign')),
                ('useInstr', models.CharField(blank=True, max_length=50, verbose_name='Annotation instructions')),
                ('rmrks', models.CharField(blank=True, max_length=50, verbose_name='Remarks')),
                ('blend', models.CharField(blank=True, max_length=100, null=True, verbose_name='Blend of')),
                ('blendtf', models.NullBooleanField(verbose_name='Blend')),
                ('compound', models.CharField(blank=True, max_length=100, verbose_name='Compound of')),
                ('comptf', models.NullBooleanField(verbose_name='Compound')),
                ('handedness', models.CharField(blank=True, choices=[(b'0', b'-'), (b'1', b'N/A'), (b'2', '1'), (b'4', '2a'), (b'5', '2s'), (b'6', 'X')], max_length=5, null=True, verbose_name='Handedness')),
                ('domhndsh', models.CharField(blank=True, choices=[(b'0', b'-'), (b'1', b'N/A'), (b'89', '#A'), (b'90', '#B'), (b'162', '#B > #A'), (b'91', '#B > #L'), (b'92', '#B > #S'), (b'157', '#B > middlefinger'), (b'93', '#C'), (b'161', '#C > #I'), (b'94', '#D'), (b'95', '#E'), (b'96', '#F'), (b'97', '#F > #L'), (b'163', '#G'), (b'164', '#G'), (b'98', '#I'), (b'110', '#I > #L'), (b'158', '#I > #N'), (b'100', '#I > #R'), (b'99', '#I > #W'), (b'108', '#I > 1'), (b'109', '#I > N'), (b'42', '#K'), (b'101', '#L'), (b'102', '#M'), (b'103', '#M > #V'), (b'104', '#N'), (b'105', '#N > #E'), (b'165', '#O'), (b'107', '#O > #K'), (b'148', '#P'), (b'166', '#Q'), (b'167', '#R'), (b'156', '#S'), (b'112', '#S > #I'), (b'111', '#S > #W'), (b'113', '#T'), (b'141', '#T > #L'), (b'150', '#T > #V'), (b'160', '#V'), (b'115', '#W'), (b'168', '#Y'), (b'159', '#Y > #R'), (b'15', '1'), (b'21', '1_curved'), (b'37', '3'), (b'35', '4'), (b'3', '5'), (b'149', '5 > #V'), (b'30', '5m'), (b'43', '5mx'), (b'19', '5r'), (b'49', '5rx'), (b'48', '9'), (b'117', '=1'), (b'118', '=3'), (b'119', '=3 > =0'), (b'120', '=4'), (b'121', '=4 > =0'), (b'122', '=5'), (b'123', '=9'), (b'124', '=A'), (b'143', '=A > =T'), (b'126', '=Baby_O'), (b'127', '=F'), (b'128', '=L'), (b'144', '=L > =O'), (b'129', '=O'), (b'130', '=T'), (b'131', '=V'), (b'133', '=W'), (b'134', '=W > =Beak2'), (b'24', 'A'), (b'153', 'A > 5'), (b'6', 'B'), (b'138', 'B+1'), (b'26', 'B_bent'), (b'13', 'B_curved'), (b'62', 'Baby_C'), (b'38', 'Baby_O'), (b'29', 'Baby_beak'), (b'155', 'Baby_beak > A'), (b'83', 'Baby_beak_open'), (b'22', 'Beak'), (b'17', 'Beak2'), (b'85', 'Beak2_open'), (b'152', 'Beak2_open_spread'), (b'23', 'Beak2_spread'), (b'84', 'Beak_open'), (b'87', 'Beak_open_spread'), (b'86', 'Beak_spread'), (b'27', 'C'), (b'145', 'C > I'), (b'136', 'C2_closed'), (b'75', 'C2_spread'), (b'12', 'C_spread'), (b'34', 'D'), (b'39', 'F'), (b'59', 'Horns'), (b'25', 'I'), (b'146', 'I > #L'), (b'147', 'I > #N'), (b'9', 'L'), (b'52', 'L2'), (b'40', 'M'), (b'80', 'Middle finger'), (b'4', 'Money'), (b'14', 'N'), (b'142', 'N > B'), (b'32', 'O'), (b'139', 'O > 5m'), (b'135', 'Other'), (b'18', 'Q'), (b'47', 'R'), (b'8', 'S'), (b'28', 'T'), (b'154', 'T_open'), (b'5', 'V'), (b'20', 'V_curved'), (b'16', 'W'), (b'7', 'Y')], max_length=5, null=True, verbose_name='Strong Hand')),
                ('subhndsh', models.CharField(blank=True, choices=[(b'0', b'-'), (b'1', b'N/A'), (b'89', '#A'), (b'90', '#B'), (b'162', '#B > #A'), (b'91', '#B > #L'), (b'92', '#B > #S'), (b'157', '#B > middlefinger'), (b'93', '#C'), (b'161', '#C > #I'), (b'94', '#D'), (b'95', '#E'), (b'96', '#F'), (b'97', '#F > #L'), (b'163', '#G'), (b'164', '#G'), (b'98', '#I'), (b'110', '#I > #L'), (b'158', '#I > #N'), (b'100', '#I > #R'), (b'99', '#I > #W'), (b'108', '#I > 1'), (b'109', '#I > N'), (b'42', '#K'), (b'101', '#L'), (b'102', '#M'), (b'103', '#M > #V'), (b'104', '#N'), (b'105', '#N > #E'), (b'165', '#O'), (b'107', '#O > #K'), (b'148', '#P'), (b'166', '#Q'), (b'167', '#R'), (b'156', '#S'), (b'112', '#S > #I'), (b'111', '#S > #W'), (b'113', '#T'), (b'141', '#T > #L'), (b'150', '#T > #V'), (b'160', '#V'), (b'115', '#W'), (b'168', '#Y'), (b'159', '#Y > #R'), (b'15', '1'), (b'21', '1_curved'), (b'37', '3'), (b'35', '4'), (b'3', '5'), (b'149', '5 > #V'), (b'30', '5m'), (b'43', '5mx'), (b'19', '5r'), (b'49', '5rx'), (b'48', '9'), (b'117', '=1'), (b'118', '=3'), (b'119', '=3 > =0'), (b'120', '=4'), (b'121', '=4 > =0'), (b'122', '=5'), (b'123', '=9'), (b'124', '=A'), (b'143', '=A > =T'), (b'126', '=Baby_O'), (b'127', '=F'), (b'128', '=L'), (b'144', '=L > =O'), (b'129', '=O'), (b'130', '=T'), (b'131', '=V'), (b'133', '=W'), (b'134', '=W > =Beak2'), (b'24', 'A'), (b'153', 'A > 5'), (b'6', 'B'), (b'138', 'B+1'), (b'26', 'B_bent'), (b'13', 'B_curved'), (b'62', 'Baby_C'), (b'38', 'Baby_O'), (b'29', 'Baby_beak'), (b'155', 'Baby_beak > A'), (b'83', 'Baby_beak_open'), (b'22', 'Beak'), (b'17', 'Beak2'), (b'85', 'Beak2_open'), (b'152', 'Beak2_open_spread'), (b'23', 'Beak2_spread'), (b'84', 'Beak_open'), (b'87', 'Beak_open_spread'), (b'86', 'Beak_spread'), (b'27', 'C'), (b'145', 'C > I'), (b'136', 'C2_closed'), (b'75', 'C2_spread'), (b'12', 'C_spread'), (b'34', 'D'), (b'39', 'F'), (b'59', 'Horns'), (b'25', 'I'), (b'146', 'I > #L'), (b'147', 'I > #N'), (b'9', 'L'), (b'52', 'L2'), (b'40', 'M'), (b'80', 'Middle finger'), (b'4', 'Money'), (b'14', 'N'), (b'142', 'N > B'), (b'32', 'O'), (b'139', 'O > 5m'), (b'135', 'Other'), (b'18', 'Q'), (b'47', 'R'), (b'8', 'S'), (b'28', 'T'), (b'154', 'T_open'), (b'5', 'V'), (b'20', 'V_curved'), (b'16', 'W'), (b'7', 'Y')], max_length=5, null=True, verbose_name='Weak Hand')),
                ('final_domhndsh', models.CharField(blank=True, choices=[(b'0', b'-'), (b'1', b'N/A'), (b'89', '#A'), (b'90', '#B'), (b'162', '#B > #A'), (b'91', '#B > #L'), (b'92', '#B > #S'), (b'157', '#B > middlefinger'), (b'93', '#C'), (b'161', '#C > #I'), (b'94', '#D'), (b'95', '#E'), (b'96', '#F'), (b'97', '#F > #L'), (b'163', '#G'), (b'164', '#G'), (b'98', '#I'), (b'110', '#I > #L'), (b'158', '#I > #N'), (b'100', '#I > #R'), (b'99', '#I > #W'), (b'108', '#I > 1'), (b'109', '#I > N'), (b'42', '#K'), (b'101', '#L'), (b'102', '#M'), (b'103', '#M > #V'), (b'104', '#N'), (b'105', '#N > #E'), (b'165', '#O'), (b'107', '#O > #K'), (b'148', '#P'), (b'166', '#Q'), (b'167', '#R'), (b'156', '#S'), (b'112', '#S > #I'), (b'111', '#S > #W'), (b'113', '#T'), (b'141', '#T > #L'), (b'150', '#T > #V'), (b'160', '#V'), (b'115', '#W'), (b'168', '#Y'), (b'159', '#Y > #R'), (b'15', '1'), (b'21', '1_curved'), (b'37', '3'), (b'35', '4'), (b'3', '5'), (b'149', '5 > #V'), (b'30', '5m'), (b'43', '5mx'), (b'19', '5r'), (b'49', '5rx'), (b'48', '9'), (b'117', '=1'), (b'118', '=3'), (b'119', '=3 > =0'), (b'120', '=4'), (b'121', '=4 > =0'), (b'122', '=5'), (b'123', '=9'), (b'124', '=A'), (b'143', '=A > =T'), (b'126', '=Baby_O'), (b'127', '=F'), (b'128', '=L'), (b'144', '=L > =O'), (b'129', '=O'), (b'130', '=T'), (b'131', '=V'), (b'133', '=W'), (b'134', '=W > =Beak2'), (b'24', 'A'), (b'153', 'A > 5'), (b'6', 'B'), (b'138', 'B+1'), (b'26', 'B_bent'), (b'13', 'B_curved'), (b'62', 'Baby_C'), (b'38', 'Baby_O'), (b'29', 'Baby_beak'), (b'155', 'Baby_beak > A'), (b'83', 'Baby_beak_open'), (b'22', 'Beak'), (b'17', 'Beak2'), (b'85', 'Beak2_open'), (b'152', 'Beak2_open_spread'), (b'23', 'Beak2_spread'), (b'84', 'Beak_open'), (b'87', 'Beak_open_spread'), (b'86', 'Beak_spread'), (b'27', 'C'), (b'145', 'C > I'), (b'136', 'C2_closed'), (b'75', 'C2_spread'), (b'12', 'C_spread'), (b'34', 'D'), (b'39', 'F'), (b'59', 'Horns'), (b'25', 'I'), (b'146', 'I > #L'), (b'147', 'I > #N'), (b'9', 'L'), (b'52', 'L2'), (b'40', 'M'), (b'80', 'Middle finger'), (b'4', 'Money'), (b'14', 'N'), (b'142', 'N > B'), (b'32', 'O'), (b'139', 'O > 5m'), (b'135', 'Other'), (b'18', 'Q'), (b'47', 'R'), (b'8', 'S'), (b'28', 'T'), (b'154', 'T_open'), (b'5', 'V'), (b'20', 'V_curved'), (b'16', 'W'), (b'7', 'Y')], max_length=5, null=True, verbose_name='Final Dominant Handshape')),
                ('final_subhndsh', models.CharField(blank=True, choices=[(b'0', b'-'), (b'1', b'N/A'), (b'89', '#A'), (b'90', '#B'), (b'162', '#B > #A'), (b'91', '#B > #L'), (b'92', '#B > #S'), (b'157', '#B > middlefinger'), (b'93', '#C'), (b'161', '#C > #I'), (b'94', '#D'), (b'95', '#E'), (b'96', '#F'), (b'97', '#F > #L'), (b'163', '#G'), (b'164', '#G'), (b'98', '#I'), (b'110', '#I > #L'), (b'158', '#I > #N'), (b'100', '#I > #R'), (b'99', '#I > #W'), (b'108', '#I > 1'), (b'109', '#I > N'), (b'42', '#K'), (b'101', '#L'), (b'102', '#M'), (b'103', '#M > #V'), (b'104', '#N'), (b'105', '#N > #E'), (b'165', '#O'), (b'107', '#O > #K'), (b'148', '#P'), (b'166', '#Q'), (b'167', '#R'), (b'156', '#S'), (b'112', '#S > #I'), (b'111', '#S > #W'), (b'113', '#T'), (b'141', '#T > #L'), (b'150', '#T > #V'), (b'160', '#V'), (b'115', '#W'), (b'168', '#Y'), (b'159', '#Y > #R'), (b'15', '1'), (b'21', '1_curved'), (b'37', '3'), (b'35', '4'), (b'3', '5'), (b'149', '5 > #V'), (b'30', '5m'), (b'43', '5mx'), (b'19', '5r'), (b'49', '5rx'), (b'48', '9'), (b'117', '=1'), (b'118', '=3'), (b'119', '=3 > =0'), (b'120', '=4'), (b'121', '=4 > =0'), (b'122', '=5'), (b'123', '=9'), (b'124', '=A'), (b'143', '=A > =T'), (b'126', '=Baby_O'), (b'127', '=F'), (b'128', '=L'), (b'144', '=L > =O'), (b'129', '=O'), (b'130', '=T'), (b'131', '=V'), (b'133', '=W'), (b'134', '=W > =Beak2'), (b'24', 'A'), (b'153', 'A > 5'), (b'6', 'B'), (b'138', 'B+1'), (b'26', 'B_bent'), (b'13', 'B_curved'), (b'62', 'Baby_C'), (b'38', 'Baby_O'), (b'29', 'Baby_beak'), (b'155', 'Baby_beak > A'), (b'83', 'Baby_beak_open'), (b'22', 'Beak'), (b'17', 'Beak2'), (b'85', 'Beak2_open'), (b'152', 'Beak2_open_spread'), (b'23', 'Beak2_spread'), (b'84', 'Beak_open'), (b'87', 'Beak_open_spread'), (b'86', 'Beak_spread'), (b'27', 'C'), (b'145', 'C > I'), (b'136', 'C2_closed'), (b'75', 'C2_spread'), (b'12', 'C_spread'), (b'34', 'D'), (b'39', 'F'), (b'59', 'Horns'), (b'25', 'I'), (b'146', 'I > #L'), (b'147', 'I > #N'), (b'9', 'L'), (b'52', 'L2'), (b'40', 'M'), (b'80', 'Middle finger'), (b'4', 'Money'), (b'14', 'N'), (b'142', 'N > B'), (b'32', 'O'), (b'139', 'O > 5m'), (b'135', 'Other'), (b'18', 'Q'), (b'47', 'R'), (b'8', 'S'), (b'28', 'T'), (b'154', 'T_open'), (b'5', 'V'), (b'20', 'V_curved'), (b'16', 'W'), (b'7', 'Y')], max_length=5, null=True, verbose_name='Final Subordinate Handshape')),
                ('locprim', models.CharField(blank=True, choices=[(b'0', b'-'), (b'1', b'N/A'), (b'21', 'Arm'), (b'83', 'Back'), (b'37', 'Back of head'), (b'26', 'Belly'), (b'14', 'Belly + forehead'), (b'23', 'Cheek'), (b'108', 'Cheek > chin'), (b'72', 'Cheek contra'), (b'16', 'Cheekbone'), (b'8', 'Chest'), (b'35', 'Chest > trunk'), (b'74', 'Chest contra'), (b'12', 'Chin'), (b'70', 'Chin > chest'), (b'28', 'Chin > neutral space'), (b'102', 'Chin > weak hand: index finger'), (b'33', 'Chin > weak hand: palm'), (b'117', 'Chin > weak hand: thumb side'), (b'18', 'Ear'), (b'84', 'Ear > cheek'), (b'77', 'Elbow'), (b'15', 'Eye'), (b'120', 'Eye > neutral space'), (b'17', 'Face'), (b'110', 'Face > head'), (b'93', 'Flank'), (b'7', 'Forehead'), (b'34', 'Forehead > chest'), (b'31', 'Forehead > chin'), (b'106', 'Forehead > neutral space'), (b'104', 'Forehead > weak hand: palm'), (b'64', 'Forehead contra'), (b'10', 'Head'), (b'119', 'Head + neutral space'), (b'113', 'Head > chest'), (b'69', 'Head > neutral space'), (b'32', 'Head > shoulder'), (b'107', 'Head > weak hand: palm'), (b'30', 'Head ipsi'), (b'94', 'Hip'), (b'92', 'Horizontal plane'), (b'85', 'Knee'), (b'45', 'Leg'), (b'95', 'Lower arm'), (b'19', 'Mouth'), (b'114', 'Mouth > cheek'), (b'48', 'Mouth > chest'), (b'13', 'Mouth > chin'), (b'58', 'Mouth > weak hand'), (b'112', 'Mouth > weak hand: palm'), (b'9', 'Neck'), (b'52', 'Neck > chest'), (b'75', 'Neck contra'), (b'3', 'Neutral space'), (b'2', 'Neutral space > head'), (b'121', 'Neutral space > nose'), (b'29', 'Neutral space/weak hand: front'), (b'22', 'Nose'), (b'103', 'Nose > chin'), (b'122', 'Nose > neutral space'), (b'116', 'Parallel plane'), (b'4', 'Shoulder'), (b'115', 'Shoulder > shoulder'), (b'123', 'Shoulder > weak hand: palm'), (b'55', 'Shoulder contra'), (b'86', 'Shoulder contra > shoulder ipsi'), (b'43', 'Temple'), (b'78', 'Temple > chest'), (b'79', 'Thumb'), (b'27', 'Tongue'), (b'97', 'Trunk'), (b'54', 'Upper arm'), (b'63', 'Upper lip'), (b'118', 'Variable'), (b'91', 'Virtual object'), (b'5', 'Weak hand'), (b'6', 'Weak hand > arm'), (b'11', 'Weak hand: back'), (b'109', 'Weak hand: base'), (b'66', 'Weak hand: finger tips'), (b'90', 'Weak hand: front'), (b'96', 'Weak hand: index finger'), (b'98', 'Weak hand: middle finger'), (b'36', 'Weak hand: palm'), (b'88', 'Weak hand: pinkie'), (b'101', 'Weak hand: pinkie side'), (b'99', 'Weak hand: ring finger'), (b'59', 'Weak hand: thumb'), (b'100', 'Weak hand: thumb side'), (b'111', 'Weak hand: thumb side > arm'), (b'89', 'Weak hand: web space'), (b'50', 'Wrist')], max_length=20, null=True, verbose_name='Location')),
                ('final_loc', models.IntegerField(blank=True, choices=[(b'0', b'-'), (b'1', b'N/A'), (b'21', 'Arm'), (b'83', 'Back'), (b'37', 'Back of head'), (b'26', 'Belly'), (b'14', 'Belly + forehead'), (b'23', 'Cheek'), (b'108', 'Cheek > chin'), (b'72', 'Cheek contra'), (b'16', 'Cheekbone'), (b'8', 'Chest'), (b'35', 'Chest > trunk'), (b'74', 'Chest contra'), (b'12', 'Chin'), (b'70', 'Chin > chest'), (b'28', 'Chin > neutral space'), (b'102', 'Chin > weak hand: index finger'), (b'33', 'Chin > weak hand: palm'), (b'117', 'Chin > weak hand: thumb side'), (b'18', 'Ear'), (b'84', 'Ear > cheek'), (b'77', 'Elbow'), (b'15', 'Eye'), (b'120', 'Eye > neutral space'), (b'17', 'Face'), (b'110', 'Face > head'), (b'93', 'Flank'), (b'7', 'Forehead'), (b'34', 'Forehead > chest'), (b'31', 'Forehead > chin'), (b'106', 'Forehead > neutral space'), (b'104', 'Forehead > weak hand: palm'), (b'64', 'Forehead contra'), (b'10', 'Head'), (b'119', 'Head + neutral space'), (b'113', 'Head > chest'), (b'69', 'Head > neutral space'), (b'32', 'Head > shoulder'), (b'107', 'Head > weak hand: palm'), (b'30', 'Head ipsi'), (b'94', 'Hip'), (b'92', 'Horizontal plane'), (b'85', 'Knee'), (b'45', 'Leg'), (b'95', 'Lower arm'), (b'19', 'Mouth'), (b'114', 'Mouth > cheek'), (b'48', 'Mouth > chest'), (b'13', 'Mouth > chin'), (b'58', 'Mouth > weak hand'), (b'112', 'Mouth > weak hand: palm'), (b'9', 'Neck'), (b'52', 'Neck > chest'), (b'75', 'Neck contra'), (b'3', 'Neutral space'), (b'2', 'Neutral space > head'), (b'121', 'Neutral space > nose'), (b'29', 'Neutral space/weak hand: front'), (b'22', 'Nose'), (b'103', 'Nose > chin'), (b'122', 'Nose > neutral space'), (b'116', 'Parallel plane'), (b'4', 'Shoulder'), (b'115', 'Shoulder > shoulder'), (b'123', 'Shoulder > weak hand: palm'), (b'55', 'Shoulder contra'), (b'86', 'Shoulder contra > shoulder ipsi'), (b'43', 'Temple'), (b'78', 'Temple > chest'), (b'79', 'Thumb'), (b'27', 'Tongue'), (b'97', 'Trunk'), (b'54', 'Upper arm'), (b'63', 'Upper lip'), (b'118', 'Variable'), (b'91', 'Virtual object'), (b'5', 'Weak hand'), (b'6', 'Weak hand > arm'), (b'11', 'Weak hand: back'), (b'109', 'Weak hand: base'), (b'66', 'Weak hand: finger tips'), (b'90', 'Weak hand: front'), (b'96', 'Weak hand: index finger'), (b'98', 'Weak hand: middle finger'), (b'36', 'Weak hand: palm'), (b'88', 'Weak hand: pinkie'), (b'101', 'Weak hand: pinkie side'), (b'99', 'Weak hand: ring finger'), (b'59', 'Weak hand: thumb'), (b'100', 'Weak hand: thumb side'), (b'111', 'Weak hand: thumb side > arm'), (b'89', 'Weak hand: web space'), (b'50', 'Wrist')], null=True, verbose_name='Final Primary Location')),
                ('locVirtObj', models.CharField(blank=True, max_length=50, null=True, verbose_name='Virtual Object')),
                ('locsecond', models.IntegerField(blank=True, choices=[(b'0', b'-'), (b'1', b'N/A'), (b'21', 'Arm'), (b'83', 'Back'), (b'37', 'Back of head'), (b'26', 'Belly'), (b'14', 'Belly + forehead'), (b'23', 'Cheek'), (b'108', 'Cheek > chin'), (b'72', 'Cheek contra'), (b'16', 'Cheekbone'), (b'8', 'Chest'), (b'35', 'Chest > trunk'), (b'74', 'Chest contra'), (b'12', 'Chin'), (b'70', 'Chin > chest'), (b'28', 'Chin > neutral space'), (b'102', 'Chin > weak hand: index finger'), (b'33', 'Chin > weak hand: palm'), (b'117', 'Chin > weak hand: thumb side'), (b'18', 'Ear'), (b'84', 'Ear > cheek'), (b'77', 'Elbow'), (b'15', 'Eye'), (b'120', 'Eye > neutral space'), (b'17', 'Face'), (b'110', 'Face > head'), (b'93', 'Flank'), (b'7', 'Forehead'), (b'34', 'Forehead > chest'), (b'31', 'Forehead > chin'), (b'106', 'Forehead > neutral space'), (b'104', 'Forehead > weak hand: palm'), (b'64', 'Forehead contra'), (b'10', 'Head'), (b'119', 'Head + neutral space'), (b'113', 'Head > chest'), (b'69', 'Head > neutral space'), (b'32', 'Head > shoulder'), (b'107', 'Head > weak hand: palm'), (b'30', 'Head ipsi'), (b'94', 'Hip'), (b'92', 'Horizontal plane'), (b'85', 'Knee'), (b'45', 'Leg'), (b'95', 'Lower arm'), (b'19', 'Mouth'), (b'114', 'Mouth > cheek'), (b'48', 'Mouth > chest'), (b'13', 'Mouth > chin'), (b'58', 'Mouth > weak hand'), (b'112', 'Mouth > weak hand: palm'), (b'9', 'Neck'), (b'52', 'Neck > chest'), (b'75', 'Neck contra'), (b'3', 'Neutral space'), (b'2', 'Neutral space > head'), (b'121', 'Neutral space > nose'), (b'29', 'Neutral space/weak hand: front'), (b'22', 'Nose'), (b'103', 'Nose > chin'), (b'122', 'Nose > neutral space'), (b'116', 'Parallel plane'), (b'4', 'Shoulder'), (b'115', 'Shoulder > shoulder'), (b'123', 'Shoulder > weak hand: palm'), (b'55', 'Shoulder contra'), (b'86', 'Shoulder contra > shoulder ipsi'), (b'43', 'Temple'), (b'78', 'Temple > chest'), (b'79', 'Thumb'), (b'27', 'Tongue'), (b'97', 'Trunk'), (b'54', 'Upper arm'), (b'63', 'Upper lip'), (b'118', 'Variable'), (b'91', 'Virtual object'), (b'5', 'Weak hand'), (b'6', 'Weak hand > arm'), (b'11', 'Weak hand: back'), (b'109', 'Weak hand: base'), (b'66', 'Weak hand: finger tips'), (b'90', 'Weak hand: front'), (b'96', 'Weak hand: index finger'), (b'98', 'Weak hand: middle finger'), (b'36', 'Weak hand: palm'), (b'88', 'Weak hand: pinkie'), (b'101', 'Weak hand: pinkie side'), (b'99', 'Weak hand: ring finger'), (b'59', 'Weak hand: thumb'), (b'100', 'Weak hand: thumb side'), (b'111', 'Weak hand: thumb side > arm'), (b'89', 'Weak hand: web space'), (b'50', 'Wrist')], null=True, verbose_name='Secondary Location')),
                ('initial_secondary_loc', models.CharField(blank=True, choices=[(b'0', b'-'), (b'1', b'N/A'), (b'21', 'Arm'), (b'83', 'Back'), (b'37', 'Back of head'), (b'26', 'Belly'), (b'14', 'Belly + forehead'), (b'23', 'Cheek'), (b'108', 'Cheek > chin'), (b'72', 'Cheek contra'), (b'16', 'Cheekbone'), (b'8', 'Chest'), (b'35', 'Chest > trunk'), (b'74', 'Chest contra'), (b'12', 'Chin'), (b'70', 'Chin > chest'), (b'28', 'Chin > neutral space'), (b'102', 'Chin > weak hand: index finger'), (b'33', 'Chin > weak hand: palm'), (b'117', 'Chin > weak hand: thumb side'), (b'18', 'Ear'), (b'84', 'Ear > cheek'), (b'77', 'Elbow'), (b'15', 'Eye'), (b'120', 'Eye > neutral space'), (b'17', 'Face'), (b'110', 'Face > head'), (b'93', 'Flank'), (b'7', 'Forehead'), (b'34', 'Forehead > chest'), (b'31', 'Forehead > chin'), (b'106', 'Forehead > neutral space'), (b'104', 'Forehead > weak hand: palm'), (b'64', 'Forehead contra'), (b'10', 'Head'), (b'119', 'Head + neutral space'), (b'113', 'Head > chest'), (b'69', 'Head > neutral space'), (b'32', 'Head > shoulder'), (b'107', 'Head > weak hand: palm'), (b'30', 'Head ipsi'), (b'94', 'Hip'), (b'92', 'Horizontal plane'), (b'85', 'Knee'), (b'45', 'Leg'), (b'95', 'Lower arm'), (b'19', 'Mouth'), (b'114', 'Mouth > cheek'), (b'48', 'Mouth > chest'), (b'13', 'Mouth > chin'), (b'58', 'Mouth > weak hand'), (b'112', 'Mouth > weak hand: palm'), (b'9', 'Neck'), (b'52', 'Neck > chest'), (b'75', 'Neck contra'), (b'3', 'Neutral space'), (b'2', 'Neutral space > head'), (b'121', 'Neutral space > nose'), (b'29', 'Neutral space/weak hand: front'), (b'22', 'Nose'), (b'103', 'Nose > chin'), (b'122', 'Nose > neutral space'), (b'116', 'Parallel plane'), (b'4', 'Shoulder'), (b'115', 'Shoulder > shoulder'), (b'123', 'Shoulder > weak hand: palm'), (b'55', 'Shoulder contra'), (b'86', 'Shoulder contra > shoulder ipsi'), (b'43', 'Temple'), (b'78', 'Temple > chest'), (b'79', 'Thumb'), (b'27', 'Tongue'), (b'97', 'Trunk'), (b'54', 'Upper arm'), (b'63', 'Upper lip'), (b'118', 'Variable'), (b'91', 'Virtual object'), (b'5', 'Weak hand'), (b'6', 'Weak hand > arm'), (b'11', 'Weak hand: back'), (b'109', 'Weak hand: base'), (b'66', 'Weak hand: finger tips'), (b'90', 'Weak hand: front'), (b'96', 'Weak hand: index finger'), (b'98', 'Weak hand: middle finger'), (b'36', 'Weak hand: palm'), (b'88', 'Weak hand: pinkie'), (b'101', 'Weak hand: pinkie side'), (b'99', 'Weak hand: ring finger'), (b'59', 'Weak hand: thumb'), (b'100', 'Weak hand: thumb side'), (b'111', 'Weak hand: thumb side > arm'), (b'89', 'Weak hand: web space'), (b'50', 'Wrist')], max_length=20, null=True, verbose_name='Initial Subordinate Location')),
                ('final_secondary_loc', models.CharField(blank=True, choices=[(b'0', b'-'), (b'1', b'N/A'), (b'21', 'Arm'), (b'83', 'Back'), (b'37', 'Back of head'), (b'26', 'Belly'), (b'14', 'Belly + forehead'), (b'23', 'Cheek'), (b'108', 'Cheek > chin'), (b'72', 'Cheek contra'), (b'16', 'Cheekbone'), (b'8', 'Chest'), (b'35', 'Chest > trunk'), (b'74', 'Chest contra'), (b'12', 'Chin'), (b'70', 'Chin > chest'), (b'28', 'Chin > neutral space'), (b'102', 'Chin > weak hand: index finger'), (b'33', 'Chin > weak hand: palm'), (b'117', 'Chin > weak hand: thumb side'), (b'18', 'Ear'), (b'84', 'Ear > cheek'), (b'77', 'Elbow'), (b'15', 'Eye'), (b'120', 'Eye > neutral space'), (b'17', 'Face'), (b'110', 'Face > head'), (b'93', 'Flank'), (b'7', 'Forehead'), (b'34', 'Forehead > chest'), (b'31', 'Forehead > chin'), (b'106', 'Forehead > neutral space'), (b'104', 'Forehead > weak hand: palm'), (b'64', 'Forehead contra'), (b'10', 'Head'), (b'119', 'Head + neutral space'), (b'113', 'Head > chest'), (b'69', 'Head > neutral space'), (b'32', 'Head > shoulder'), (b'107', 'Head > weak hand: palm'), (b'30', 'Head ipsi'), (b'94', 'Hip'), (b'92', 'Horizontal plane'), (b'85', 'Knee'), (b'45', 'Leg'), (b'95', 'Lower arm'), (b'19', 'Mouth'), (b'114', 'Mouth > cheek'), (b'48', 'Mouth > chest'), (b'13', 'Mouth > chin'), (b'58', 'Mouth > weak hand'), (b'112', 'Mouth > weak hand: palm'), (b'9', 'Neck'), (b'52', 'Neck > chest'), (b'75', 'Neck contra'), (b'3', 'Neutral space'), (b'2', 'Neutral space > head'), (b'121', 'Neutral space > nose'), (b'29', 'Neutral space/weak hand: front'), (b'22', 'Nose'), (b'103', 'Nose > chin'), (b'122', 'Nose > neutral space'), (b'116', 'Parallel plane'), (b'4', 'Shoulder'), (b'115', 'Shoulder > shoulder'), (b'123', 'Shoulder > weak hand: palm'), (b'55', 'Shoulder contra'), (b'86', 'Shoulder contra > shoulder ipsi'), (b'43', 'Temple'), (b'78', 'Temple > chest'), (b'79', 'Thumb'), (b'27', 'Tongue'), (b'97', 'Trunk'), (b'54', 'Upper arm'), (b'63', 'Upper lip'), (b'118', 'Variable'), (b'91', 'Virtual object'), (b'5', 'Weak hand'), (b'6', 'Weak hand > arm'), (b'11', 'Weak hand: back'), (b'109', 'Weak hand: base'), (b'66', 'Weak hand: finger tips'), (b'90', 'Weak hand: front'), (b'96', 'Weak hand: index finger'), (b'98', 'Weak hand: middle finger'), (b'36', 'Weak hand: palm'), (b'88', 'Weak hand: pinkie'), (b'101', 'Weak hand: pinkie side'), (b'99', 'Weak hand: ring finger'), (b'59', 'Weak hand: thumb'), (b'100', 'Weak hand: thumb side'), (b'111', 'Weak hand: thumb side > arm'), (b'89', 'Weak hand: web space'), (b'50', 'Wrist')], max_length=20, null=True, verbose_name='Final Subordinate Location')),
                ('initial_palm_orientation', models.CharField(blank=True, max_length=20, null=True, verbose_name='Initial Palm Orientation')),
                ('final_palm_orientation', models.CharField(blank=True, max_length=20, null=True, verbose_name='Final Palm Orientation')),
                ('initial_relative_orientation', models.CharField(blank=True, max_length=20, null=True, verbose_name='Initial Interacting Dominant Hand Part')),
                ('final_relative_orientation', models.CharField(blank=True, max_length=20, null=True, verbose_name='Final Interacting Dominant Hand Part')),
                ('domSF', models.CharField(blank=True, choices=[(b'0', b'-'), (b'1', b'N/A')], max_length=5, null=True, verbose_name=b'Dominant hand - Selected Fingers')),
                ('domFlex', models.CharField(blank=True, choices=[(b'0', b'-'), (b'1', b'N/A')], max_length=5, null=True, verbose_name=b'Dominant hand - Flexion')),
                ('oriChAbd', models.NullBooleanField(verbose_name='Abduction change')),
                ('oriChFlex', models.NullBooleanField(verbose_name='Flexion change')),
                ('inWeb', models.NullBooleanField(default=False, verbose_name='In the Web dictionary')),
                ('isNew', models.NullBooleanField(default=False, verbose_name='Is this a proposed new sign?')),
                ('inittext', models.CharField(blank=True, max_length=50)),
                ('morph', models.CharField(blank=True, max_length=50, verbose_name='Morphemic Analysis')),
                ('sedefinetf', models.TextField(blank=True, null=True, verbose_name='Signed English definition available')),
                ('segloss', models.CharField(blank=True, max_length=50, null=True, verbose_name='Signed English gloss')),
                ('sense', models.IntegerField(blank=True, help_text=b'If there is more than one sense of a sign enter a number here, all signs with sense>1 will use the same video as sense=1', null=True, verbose_name='Sense Number')),
                ('sn', models.IntegerField(blank=True, help_text=b'Sign Number must be a unique integer and defines the ordering of signs in the dictionary', null=True, unique=True, verbose_name='Sign Number')),
                ('StemSN', models.IntegerField(blank=True, null=True)),
                ('relatArtic', models.CharField(blank=True, choices=[(b'0', b'-'), (b'1', b'N/A'), (b'45', 'Above'), (b'47', 'Above/below'), (b'43', 'Back'), (b'46', 'Below'), (b'39', 'Contact'), (b'41', 'Cross'), (b'42', 'Front'), (b'44', 'Front/back'), (b'48', 'Inside'), (b'27', 'Interlocked'), (b'40', 'Interwoven')], max_length=5, null=True, verbose_name='Relation between Articulators')),
                ('absOriPalm', models.CharField(blank=True, choices=[(b'0', b'-'), (b'1', b'N/A')], max_length=5, null=True, verbose_name='Absolute Orientation: Palm')),
                ('absOriFing', models.CharField(blank=True, choices=[(b'0', b'-'), (b'1', b'N/A')], max_length=5, null=True, verbose_name='Absolute Orientation: Fingers')),
                ('relOriMov', models.CharField(blank=True, choices=[(b'0', b'-'), (b'1', b'N/A'), (b'7', 'Back'), (b'25', 'Back + base'), (b'31', 'Back + ulnar'), (b'46', 'Back > finger tips'), (b'45', 'Back > front'), (b'15', 'Back > palm'), (b'38', 'Back/base'), (b'48', 'Back/finger tips'), (b'23', 'Back/palm'), (b'22', 'Base'), (b'24', 'Base + front'), (b'26', 'Base + palm'), (b'27', 'Base + ulnar'), (b'28', 'Base > base'), (b'39', 'Base > front'), (b'37', 'Base > palm'), (b'29', 'Base > ulnar'), (b'36', 'Base/front'), (b'4', 'Finger tips'), (b'44', 'Finger tips > base'), (b'43', 'Finger tips > palm'), (b'35', 'Finger tips/base'), (b'6', 'Front'), (b'10', 'Front + ulnar'), (b'3', 'Palm'), (b'49', 'Palm + radial'), (b'40', 'Palm + ulnar'), (b'33', 'Palm > back'), (b'30', 'Palm > base'), (b'5', 'Radial'), (b'34', 'Radial > ulnar'), (b'32', 'Radial/ulnar'), (b'2', 'Ulnar'), (b'47', 'Ulnar > base'), (b'41', 'Ulnar > base > radial'), (b'42', 'Ulnar > front'), (b'17', 'Ulnar > palm'), (b'19', 'Ulnar > palm > radial'), (b'9', 'Variable')], max_length=5, null=True, verbose_name='Relative Orientation: Movement')),
                ('relOriLoc', models.CharField(blank=True, choices=[(b'0', b'-'), (b'1', b'N/A'), (b'8', 'Back'), (b'27', 'Back/palm'), (b'28', 'Back/palm > palm'), (b'3', 'Base'), (b'4', 'Finger tips'), (b'24', 'Finger tips/base'), (b'26', 'Fingerspelling'), (b'25', 'Front'), (b'7', 'Palm'), (b'5', 'Radial'), (b'2', 'Radial/ulnar'), (b'6', 'Ulnar')], max_length=5, null=True, verbose_name='Relative Orientation: Location')),
                ('oriCh', models.CharField(blank=True, choices=[(b'0', b'-'), (b'1', b'N/A'), (b'3', 'Extension'), (b'13', 'Extension > flexion'), (b'14', 'Extension/flexion'), (b'4', 'Flexion'), (b'8', 'Pronation'), (b'9', 'Pronation/supination'), (b'12', 'Radial and ulnar flexion'), (b'5', 'Radial flexion'), (b'2', 'Rotation'), (b'7', 'Supination'), (b'6', 'Ulnar flexion')], max_length=5, null=True, verbose_name='Orientation Change')),
                ('handCh', models.CharField(blank=True, choices=[(b'0', b'-'), (b'1', b'N/A'), (b'7', 'Bending'), (b'6', 'Closing'), (b'44', 'Closing + wiggling'), (b'32', 'Closing > opening'), (b'8', 'Curving'), (b'5', 'Opening'), (b'45', 'Opening + rubbing'), (b'47', 'Opening + wiggling'), (b'38', 'Opening > closing'), (b'39', 'Rubbing'), (b'21', 'Spreading'), (b'46', 'Uncurving'), (b'10', 'Unspreading'), (b'42', 'Wiggling')], max_length=5, null=True, verbose_name='Handshape Change')),
                ('repeat', models.NullBooleanField(default=False, verbose_name='Repeated Movement')),
                ('altern', models.NullBooleanField(default=False, verbose_name='Alternating Movement')),
                ('movSh', models.CharField(blank=True, choices=[(b'0', b'-'), (b'1', b'N/A'), (b'4', 'Arc'), (b'37', 'Circle'), (b'44', 'Motivated shape'), (b'45', 'Spiral'), (b'6', 'Straight'), (b'12', 'Zigzag')], max_length=5, null=True, verbose_name='Movement Shape')),
                ('movDir', models.CharField(blank=True, choices=[(b'0', b'-'), (b'1', b'N/A'), (b'5', 'Backwards'), (b'87', 'Backwards + downwards'), (b'93', 'Backwards + ipsilateral'), (b'72', 'Backwards + upwards'), (b'6', 'Backwards > downwards'), (b'15', 'Backwards/forwards'), (b'50', 'Contralateral'), (b'53', 'Contralateral + downwards'), (b'54', 'Contralateral + forwards'), (b'52', 'Contralateral + upwards'), (b'3', 'Contralateral > forwards'), (b'98', 'Distal'), (b'8', 'Downwards'), (b'56', 'Downwards + forwards'), (b'57', 'Downwards + ipsilateral'), (b'58', 'Downwards + ipsilateral > downwards'), (b'94', 'Downwards + towards'), (b'59', 'Downwards > contralateral'), (b'4', 'Downwards > forwards'), (b'55', 'Downwards > ipsilateral'), (b'69', 'Downwards/upwards'), (b'90', 'Downwards/upwards + ipsilateral'), (b'16', 'Forwards'), (b'60', 'Forwards + ipsilateral'), (b'61', 'Forwards + upwards'), (b'63', 'Forwards > contralateral'), (b'17', 'Forwards > downwards'), (b'62', 'Forwards > ipsilateral'), (b'64', 'Forwards > ipsilateral > forwards'), (b'92', 'Forwards > upwards'), (b'51', 'Ipsilateral'), (b'91', 'Ipsilateral + up and down'), (b'65', 'Ipsilateral + upwards'), (b'71', 'Ipsilateral > contralateral'), (b'68', 'Ipsilateral > downwards'), (b'66', 'Ipsilateral > downwards > contralateral'), (b'67', 'Ipsilateral > upwards'), (b'89', 'Ipsilateral and contralateral'), (b'88', 'Ipsilateral/contralateral'), (b'95', 'Proximal'), (b'46', 'To and fro'), (b'96', 'Towards location'), (b'70', 'Up and down'), (b'32', 'Upwards'), (b'33', 'Upwards > downwards'), (b'73', 'Upwards > forwards > downwards'), (b'49', 'Variable')], max_length=5, null=True, verbose_name='Movement Direction')),
                ('movMan', models.CharField(blank=True, choices=[(b'0', b'-'), (b'1', b'N/A')], max_length=5, null=True, verbose_name='Movement Manner')),
                ('contType', models.CharField(blank=True, choices=[(b'0', b'-'), (b'1', b'N/A'), (b'2', 'Brush'), (b'6', 'Continuous'), (b'8', 'Continuous > final'), (b'13', 'Continuous > none'), (b'12', 'Double'), (b'4', 'Final'), (b'5', 'Initial'), (b'11', 'None > final'), (b'9', 'None > initial')], max_length=5, null=True, verbose_name='Contact Type')),
                ('phonOth', models.TextField(blank=True, null=True, verbose_name='Phonology Other')),
                ('mouthG', models.CharField(blank=True, max_length=50, verbose_name='Mouth Gesture')),
                ('mouthing', models.CharField(blank=True, max_length=50, verbose_name='Mouthing')),
                ('phonetVar', models.CharField(blank=True, max_length=50, verbose_name='Phonetic Variation')),
                ('locPrimLH', models.CharField(blank=True, choices=[(b'0', b'-'), (b'1', b'N/A'), (b'21', 'Arm'), (b'83', 'Back'), (b'37', 'Back of head'), (b'26', 'Belly'), (b'14', 'Belly + forehead'), (b'23', 'Cheek'), (b'108', 'Cheek > chin'), (b'72', 'Cheek contra'), (b'16', 'Cheekbone'), (b'8', 'Chest'), (b'35', 'Chest > trunk'), (b'74', 'Chest contra'), (b'12', 'Chin'), (b'70', 'Chin > chest'), (b'28', 'Chin > neutral space'), (b'102', 'Chin > weak hand: index finger'), (b'33', 'Chin > weak hand: palm'), (b'117', 'Chin > weak hand: thumb side'), (b'18', 'Ear'), (b'84', 'Ear > cheek'), (b'77', 'Elbow'), (b'15', 'Eye'), (b'120', 'Eye > neutral space'), (b'17', 'Face'), (b'110', 'Face > head'), (b'93', 'Flank'), (b'7', 'Forehead'), (b'34', 'Forehead > chest'), (b'31', 'Forehead > chin'), (b'106', 'Forehead > neutral space'), (b'104', 'Forehead > weak hand: palm'), (b'64', 'Forehead contra'), (b'10', 'Head'), (b'119', 'Head + neutral space'), (b'113', 'Head > chest'), (b'69', 'Head > neutral space'), (b'32', 'Head > shoulder'), (b'107', 'Head > weak hand: palm'), (b'30', 'Head ipsi'), (b'94', 'Hip'), (b'92', 'Horizontal plane'), (b'85', 'Knee'), (b'45', 'Leg'), (b'95', 'Lower arm'), (b'19', 'Mouth'), (b'114', 'Mouth > cheek'), (b'48', 'Mouth > chest'), (b'13', 'Mouth > chin'), (b'58', 'Mouth > weak hand'), (b'112', 'Mouth > weak hand: palm'), (b'9', 'Neck'), (b'52', 'Neck > chest'), (b'75', 'Neck contra'), (b'3', 'Neutral space'), (b'2', 'Neutral space > head'), (b'121', 'Neutral space > nose'), (b'29', 'Neutral space/weak hand: front'), (b'22', 'Nose'), (b'103', 'Nose > chin'), (b'122', 'Nose > neutral space'), (b'116', 'Parallel plane'), (b'4', 'Shoulder'), (b'115', 'Shoulder > shoulder'), (b'123', 'Shoulder > weak hand: palm'), (b'55', 'Shoulder contra'), (b'86', 'Shoulder contra > shoulder ipsi'), (b'43', 'Temple'), (b'78', 'Temple > chest'), (b'79', 'Thumb'), (b'27', 'Tongue'), (b'97', 'Trunk'), (b'54', 'Upper arm'), (b'63', 'Upper lip'), (b'118', 'Variable'), (b'91', 'Virtual object'), (b'5', 'Weak hand'), (b'6', 'Weak hand > arm'), (b'11', 'Weak hand: back'), (b'109', 'Weak hand: base'), (b'66', 'Weak hand: finger tips'), (b'90', 'Weak hand: front'), (b'96', 'Weak hand: index finger'), (b'98', 'Weak hand: middle finger'), (b'36', 'Weak hand: palm'), (b'88', 'Weak hand: pinkie'), (b'101', 'Weak hand: pinkie side'), (b'99', 'Weak hand: ring finger'), (b'59', 'Weak hand: thumb'), (b'100', 'Weak hand: thumb side'), (b'111', 'Weak hand: thumb side > arm'), (b'89', 'Weak hand: web space'), (b'50', 'Wrist')], max_length=5, null=True, verbose_name='Placement Active Articulator LH')),
                ('locFocSite', models.CharField(blank=True, max_length=5, null=True, verbose_name='Placement Focal Site RH')),
                ('locFocSiteLH', models.CharField(blank=True, max_length=5, null=True, verbose_name='Placement Focal site LH')),
                ('initArtOri', models.CharField(blank=True, max_length=5, null=True, verbose_name='Orientation RH (initial)')),
                ('finArtOri', models.CharField(blank=True, max_length=5, null=True, verbose_name='Orientation RH (final)')),
                ('initArtOriLH', models.CharField(blank=True, max_length=5, null=True, verbose_name='Orientation LH (initial)')),
                ('finArtOriLH', models.CharField(blank=True, max_length=5, null=True, verbose_name='Orientation LH (final)')),
                ('iconImg', models.CharField(blank=True, max_length=50, verbose_name='Iconic Image')),
                ('iconType', models.CharField(blank=True, choices=[(b'0', b'-'), (b'1', b'N/A')], max_length=5, null=True, verbose_name='Type of iconicity')),
                ('namEnt', models.CharField(blank=True, choices=[(b'0', b'-'), (b'1', b'N/A'), (b'6', 'Brand'), (b'17', 'Company'), (b'15', 'Continent'), (b'7', 'Country'), (b'8', 'Device'), (b'19', 'Drink'), (b'12', 'Event'), (b'20', 'Magazine'), (b'13', 'Newspaper'), (b'16', 'Organisation'), (b'2', 'Person'), (b'4', 'Place'), (b'11', 'Place nickname'), (b'9', 'Product'), (b'10', 'Project'), (b'3', 'Public figure'), (b'5', 'Region'), (b'14', 'Story character'), (b'18', 'Team')], max_length=5, null=True, verbose_name='Named Entity')),
                ('semField', models.CharField(blank=True, choices=[(b'0', b'-'), (b'1', b'N/A'), (b'4', 'Animal'), (b'5', 'Arithmetic'), (b'6', 'Arts'), (b'7', 'Body part'), (b'8', 'Car'), (b'10', 'City'), (b'11', 'Clothing'), (b'12', 'Colour'), (b'9', 'Cooking'), (b'2', 'Day'), (b'3', 'Deaf'), (b'13', 'Drink'), (b'14', 'Education'), (b'15', 'Family'), (b'17', 'Food'), (b'18', 'Furniture'), (b'19', 'Government'), (b'21', 'Health'), (b'23', 'Language act'), (b'24', 'Law'), (b'50', 'Linguistics'), (b'25', 'Material'), (b'26', 'Metalinguistic'), (b'27', 'Mind'), (b'28', 'Money'), (b'29', 'Nature'), (b'30', 'Number'), (b'31', 'People'), (b'32', 'Physical act'), (b'33', 'Quality'), (b'34', 'Quantity'), (b'35', 'Question'), (b'36', 'Recreation'), (b'37', 'Salutation'), (b'38', 'Sensation'), (b'39', 'Sexuality'), (b'40', 'Shapes'), (b'41', 'Shopping'), (b'49', 'Space'), (b'42', 'Sport'), (b'43', 'Technology'), (b'44', 'Time'), (b'45', 'Travel'), (b'46', 'Utensil'), (b'47', 'Weather'), (b'48', 'Work')], max_length=5, null=True, verbose_name='Semantic Field')),
                ('wordClass', models.CharField(blank=True, choices=[(b'0', b'-'), (b'1', b'N/A'), (b'5', 'Adjective'), (b'2', 'Noun'), (b'4', 'Particle'), (b'3', 'Verb')], max_length=5, null=True, verbose_name='Word class')),
                ('wordClass2', models.CharField(blank=True, choices=[(b'0', b'-'), (b'1', b'N/A'), (b'5', 'Adjective'), (b'2', 'Noun'), (b'4', 'Particle'), (b'3', 'Verb')], max_length=5, null=True, verbose_name='Word class 2')),
                ('derivHist', models.CharField(blank=True, choices=[(b'0', b'-'), (b'1', b'N/A'), (b'4', 'Arc'), (b'37', 'Circle'), (b'44', 'Motivated shape'), (b'45', 'Spiral'), (b'6', 'Straight'), (b'12', 'Zigzag')], max_length=50, verbose_name='Derivation history')),
                ('lexCatNotes', models.CharField(blank=True, max_length=300, null=True, verbose_name='Lexical category notes')),
                ('valence', models.CharField(blank=True, choices=[(b'0', b'-'), (b'1', b'N/A'), (b'4', 'Ditransitive'), (b'2', 'Intransitive'), (b'3', 'Transitive'), (b'5', 'Transitive and intransitive')], max_length=50, null=True, verbose_name='Valence')),
                ('tokNo', models.IntegerField(blank=True, null=True, verbose_name='Number of Occurrences')),
                ('tokNoSgnr', models.IntegerField(blank=True, null=True, verbose_name='Number of Signers')),
                ('tokNoA', models.IntegerField(blank=True, null=True, verbose_name='Number of Occurrences in Amsterdam')),
                ('tokNoV', models.IntegerField(blank=True, null=True, verbose_name='Number of Occurrences in Voorburg')),
                ('tokNoR', models.IntegerField(blank=True, null=True, verbose_name='Number of Occurrences in Rotterdam')),
                ('tokNoGe', models.IntegerField(blank=True, null=True, verbose_name='Number of Occurrences in Gestel')),
                ('tokNoGr', models.IntegerField(blank=True, null=True, verbose_name='Number of Occurrences in Groningen')),
                ('tokNoO', models.IntegerField(blank=True, null=True, verbose_name='Number of Occurrences in Other Regions')),
                ('tokNoSgnrA', models.IntegerField(blank=True, null=True, verbose_name='Number of Amsterdam Signers')),
                ('tokNoSgnrV', models.IntegerField(blank=True, null=True, verbose_name='Number of Voorburg Signers')),
                ('tokNoSgnrR', models.IntegerField(blank=True, null=True, verbose_name='Number of Rotterdam Signers')),
                ('tokNoSgnrGe', models.IntegerField(blank=True, null=True, verbose_name='Number of Gestel Signers')),
                ('tokNoSgnrGr', models.IntegerField(blank=True, null=True, verbose_name='Number of Groningen Signers')),
                ('tokNoSgnrO', models.IntegerField(blank=True, null=True, verbose_name='Number of Other Region Signers')),
                ('creationDate', models.DateField(default=datetime.datetime(2015, 1, 1, 0, 0), verbose_name='Creation date')),
                ('lastUpdated', models.DateTimeField(auto_now=True, verbose_name='Last updated')),
                ('alternative_id', models.CharField(blank=True, max_length=50, null=True)),
            ],
            options={
                'ordering': ['idgloss'],
                'verbose_name_plural': 'Glosses',
                'permissions': (('update_video', 'Can Update Video'), ('search_gloss', 'Can Search/View Full Gloss Details'), ('export_csv', 'Can export sign details as CSV'), ('export_ecv', 'Can create an ECV export file of Signbank'), ('can_publish', 'Can publish signs and definitions'), ('can_delete_unpublished', 'Can delete unpub signs or defs'), ('can_delete_published', 'Can delete pub signs and defs'), ('view_advanced_properties', 'Include all properties in sign detail view')),
            },
        ),
        migrations.CreateModel(
            name='Keyword',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('text', models.CharField(max_length=100, unique=True)),
            ],
            options={
                'ordering': ['text'],
            },
        ),
        migrations.CreateModel(
            name='Language',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=20)),
                ('description', models.TextField()),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='MorphologyDefinition',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('role', models.CharField(choices=[(b'0', b'-'), (b'1', b'N/A'), (b'2', 'Compound part 1'), (b'3', 'Compound part 2'), (b'4', 'Compound part 3'), (b'5', 'Compound part 4')], max_length=5)),
            ],
        ),
        migrations.CreateModel(
            name='OtherMedia',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type', models.CharField(choices=[(b'0', b'-'), (b'1', b'N/A'), (b'2', 'Alternative citation form'), (b'3', 'Citation form with mouthing'), (b'10', 'Handy signs: experiments (mouthing, long)'), (b'5', 'Handy signs: experiments (mouthing, short)'), (b'8', 'Handy signs: experiments (no mouthing, long)'), (b'9', 'Handy signs: experiments (no mouthing, short)'), (b'4', 'Sign in sentence context'), (b'6', 'SignPhon: citation form'), (b'7', 'SignPhon: sentence')], max_length=5)),
                ('alternative_gloss', models.CharField(max_length=50)),
                ('path', models.CharField(max_length=100)),
            ],
        ),
        migrations.CreateModel(
            name='Relation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('role', models.CharField(choices=[(b'homonym', b'Homonym'), (b'synonym', b'Synonym'), (b'variant', b'Variant'), (b'antonym', b'Antonym'), (b'hyponym', b'Hyponym'), (b'hypernym', b'Hypernym'), (b'seealso', b'See Also')], max_length=20)),
            ],
            options={
                'ordering': ['source'],
            },
        ),
        migrations.CreateModel(
            name='RelationToForeignSign',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('loan', models.BooleanField(default=False, verbose_name=b'Loan Sign')),
                ('other_lang', models.CharField(max_length=20, verbose_name=b'Related Language')),
                ('other_lang_gloss', models.CharField(max_length=50, verbose_name=b'Gloss in related language')),
            ],
            options={
                'ordering': ['gloss', 'loan', 'other_lang', 'other_lang_gloss'],
            },
        ),
        migrations.CreateModel(
            name='Translation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('index', models.IntegerField(verbose_name=b'Index')),
            ],
            options={
                'ordering': ['gloss', 'index'],
            },
        ),
        migrations.CreateModel(
            name='UserProfile',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('last_used_language', models.CharField(default=b'en', max_length=5)),
                ('expiry_date', models.DateField(blank=True, null=True)),
                ('number_of_logins', models.IntegerField(default=0, null=True)),
                ('comments', models.CharField(blank=True, max_length=500, null=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='user_profile_user', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Morpheme',
            fields=[
                ('gloss_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='dictionary.Gloss')),
                ('mrpType', models.CharField(blank=True, choices=[(b'0', b'-'), (b'1', b'N/A'), (b'23', 'Abs. Ori'), (b'13', 'Articulator: Aperture'), (b'14', 'Articulator: Finger shape'), (b'12', 'Articulator: NSF'), (b'2', 'Articulator: SF'), (b'15', 'Articulator: Spreading'), (b'11', 'Hand arrangement: Arrangement'), (b'10', 'Hand arrangement: Handedness'), (b'27', 'Location: Contact type'), (b'25', 'Location: Loc'), (b'26', 'Location: Loc side'), (b'28', 'Movement: Local'), (b'31', 'Movement: Manner'), (b'32', 'Movement: Path direction'), (b'29', 'Movement: Path shape'), (b'30', 'Movement: Repetition'), (b'5', 'Rel. Ori')], max_length=5, null=True)),
            ],
            bases=('dictionary.gloss',),
        ),
        migrations.AddField(
            model_name='translation',
            name='gloss',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='dictionary.Gloss'),
        ),
        migrations.AddField(
            model_name='translation',
            name='translation',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='dictionary.Keyword'),
        ),
        migrations.AddField(
            model_name='relationtoforeignsign',
            name='gloss',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='dictionary.Gloss'),
        ),
        migrations.AddField(
            model_name='relation',
            name='source',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='relation_sources', to='dictionary.Gloss'),
        ),
        migrations.AddField(
            model_name='relation',
            name='target',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='relation_targets', to='dictionary.Gloss'),
        ),
        migrations.AddField(
            model_name='othermedia',
            name='parent_gloss',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='dictionary.Gloss'),
        ),
        migrations.AddField(
            model_name='morphologydefinition',
            name='morpheme',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='morphemes', to='dictionary.Gloss'),
        ),
        migrations.AddField(
            model_name='morphologydefinition',
            name='parent_gloss',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='parent_glosses', to='dictionary.Gloss'),
        ),
        migrations.AddField(
            model_name='gloss',
            name='creator',
            field=models.ManyToManyField(to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='gloss',
            name='dialect',
            field=models.ManyToManyField(to='dictionary.Dialect'),
        ),
        migrations.AddField(
            model_name='gloss',
            name='language',
            field=models.ManyToManyField(to='dictionary.Language'),
        ),
        migrations.AddField(
            model_name='dialect',
            name='language',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='dictionary.Language'),
        ),
        migrations.AddField(
            model_name='definition',
            name='gloss',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='dictionary.Gloss'),
        ),
        migrations.AddField(
            model_name='gloss',
            name='morphemePart',
            field=models.ManyToManyField(blank=True, to='dictionary.Morpheme'),
        ),
    ]
